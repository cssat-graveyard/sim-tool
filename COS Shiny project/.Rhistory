slider_rounding     = NA,
facet_candidate     = FALSE,
transform_for_ui    = function(x) x + 3,
transform_for_model = function(x) x - 3
),
log_age_eps_begin = list(
pretty_name         = "Age at Start of Episode",
x_axis_candidate    = TRUE,
slider_candidate    = TRUE,
slider_rounding     = 1,
facet_candidate     = FALSE,
transform_for_ui    = function(x) exp(x) - 1,
transform_for_model = log1p
),
housing_hs_cnt = list(
pretty_name         = "Count of Housing Hardships",
x_axis_candidate    = TRUE,
slider_candidate    = TRUE,
slider_rounding     = 1,
facet_candidate     = TRUE,
transform_for_ui    = identity,
transform_for_model = identity
),
REG = list(
pretty_name         = "Region",
x_axis_candidate    = FALSE,
slider_candidate    = FALSE,
slider_rounding     = NA,
facet_candidate     = TRUE,
transform_for_ui    = identity,
transform_for_model = identity
)
)
# extract the fixed ui options (the levels for any ui features that are
# generated statically - such as the x-axis choices - rather than dynamically -
# such as the sliders)
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
current_name <- variable_config_list[[index]]$pretty_name
x_axis_options <- c(x_axis_options, current_name)
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
current_name <- variable_config_list[[index]]$pretty_name
facet_options <- c(facet_options, current_name)
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
fixed_ui_options
shiny::runApp()
variable_configuration
variable_configuration[[1]]
names(variable_configuration[[1]])
names(variable_configuration[1])
variable_configuration[["mist_scores"]]
variable_configuration[["mist_scores"]]$pretty_name
help(match)
match("Parent Mistrust", variable_configuration)
help(do.call)
do.call(variable_configuration, cbind)
help(match)
help(find)
apropos("Parent Mistrust", variable_configuration)
lapply(apropos, what = "Parent Mistrut", variable_configuration)
lapply(apropos, "Parent Mistrust", variable_configuration)
find("Parent Mistrust", variable_configuration)
help(Find)
help(find)
variable_configuration[[1]]
"Parent Mistrust" %in% variable_configuration[[1]]
"Parent Mistrust" %in% variable_configuration[1]
"Parent" %in% variable_configuration[[1]]
"Parent Mistrust" %in% variable_configuration[[1]]
help(while)
do.call(rbind, variable_configuration)
do.call(rbind, variable_configuration)$pretty_name
test <- do.call(rbind, variable_configuration)
test$pretty_name
test
data.frame(test)
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[index]
x_axis_options <- c(x_axis_options, raw_name = current_name)
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
current_name <- variable_config_list[[index]]$pretty_name
facet_options <- c(facet_options, current_name)
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[index]
x_axis_options <- c(x_axis_options, pretty_name = raw_name)
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
facet_options <- c(facet_options, pretty_name = raw_name)
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
fixed_ui_options
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[index]
x_axis_options <- c(x_axis_options, placeholder_name = raw_name)
names(x_axis_options)[index] <- raw_name
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[index]
facet_options <- c(facet_options, placeholder_name = raw_name)
names(facet_options)[index] <- raw_name
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
names(variable_configuration)
names(variable_configuration)[1]
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[index]
x_axis_options <- c(x_axis_options, placeholder_name = raw_name)
names(x_axis_options)[[index]] <- raw_name
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[index]
facet_options <- c(facet_options, placeholder_name = raw_name)
names(facet_options)[[index]] <- raw_name
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
names(variable_configuration[1])
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[[index]]
x_axis_options <- c(x_axis_options, placeholder_name = raw_name)
names(x_axis_options[index]) <- pretty_name
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
pretty_name <- variable_config_list[[index]]$pretty_name
raw_name <- names(variable_config_list)[[index]]
facet_options <- c(facet_options, placeholder_name = raw_name)
names(facet_options[index]) <- pretty_name
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
fixed_ui_options
get_fixed_ui_options <- function(variable_config_list) {
# collect the x-axis options names
x_axis_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$x_axis_candidate) {
current_name <- variable_config_list[[index]]$pretty_name
x_axis_options <- c(x_axis_options, current_name)
}
}
# collect the facet options names
facet_options <- c()
for(index in 1:length(variable_config_list)) {
if(variable_config_list[[index]]$facet_candidate) {
current_name <- variable_config_list[[index]]$pretty_name
facet_options <- c(facet_options, current_name)
}
}
# return all option collections
list(x_axis_options = x_axis_options,
facet_options  = facet_options)
}
fixed_ui_options <- get_fixed_ui_options(variable_configuration)
fixed_ui_options
do.call(rbind, variable_configuration)
as.data.frame(do.call(rbind, variable_configuration))
as.data.frame(do.call(rbind, variable_configuration))$pretty_name
match("Parent Mistrust", as.data.frame(do.call(rbind, variable_configuration))$pretty_name)
match("Parent Working Score", as.data.frame(do.call(rbind, variable_configuration))$pretty_name)
match("Region", as.data.frame(do.call(rbind, variable_configuration))$pretty_name)
raw_pretty_pairs <<- do.call(rbind, variable_configuration)
raw_pretty_pairs <- as.data.frame(raw_pretty_pairs)$pretty_name
raw_pretty_pairs
names(raw_pretty_pairs)
names(raw_pretty_pairs)[1]
shiny::runApp()
shiny::runApp()
isolate(x_axis_raw_name)
isolate(x_axis_raw_name())
input$x_axis_choice
isolate(input$x_axis_choice)
isolate(x_axis_raw_name())
shiny::runApp()
shiny::runApp()
isolate(x_axis_raw_name())
input$x_axis_choice
match(input$x_axis_choice, raw_pretty_pairs)
names(raw_pretty_pairs)
raw_pretty_pairs
shiny::runApp()
isolate(x_axis_raw_name())
shiny::runApp()
str(exp_data)
shiny::runApp()
str(exp_data)
shiny::runApp()
str(exp_data)
shiny::runApp()
isolate(x_axis_raw_name())
isolate(facet_raw_name())
names(base_data)
names(base_data) %in% names(variable_configuration)
names(variable_configuration)[[1]]
rm(list = ls())
shiny::runApp()
base_data
variable_configuration
base_data
poc_colors
load("data_model.RData")
base_data <<- data[which(complete.cases(data)), ]
median(base_data["mist_scores"])
base_data
base_data["mist_scores"]
median(base_data["mist_scores"])
median(base_data["mist_scores"], na.rm = TRUE)
median(as.numeric(base_data["mist_scores"]), na.rm = TRUE)
base_data[["mist_scores"]]
median(base_data[["mist_scores"]])
is.numeric(base_data[["mist_scores"]])
range(base_data[["mist_scores"]])
range(base_data[["mist_scores"]])
range(base_data[["mist_scores"]])[1]
add_slider_features <- function(variable_config_object,
base_data) {
# loop over the variables specified the variable configuration object
for(index in variable_config_object) {
# grab the current variable raw name
current_var <- names(variable_config_object)[[index]]
# if it's numeric, calculate the relevant values, otherwise assign NA
# to the values to the properties exist but are appropriate for a non-
# numeric variable
if(is.numeric(base_data[[current_var]]) {
current_median <- median(base_data[[current_var]])
current_range <- range(base_data[[curent_var]])
# round the range values to be user-friendly
current_range[1] <- floor(current_range[1])
current_range[2] <- ceiling(current_range[2])
} else {
current_median <- NA
current_range <- NA
}
# add the values to the variable configuration
variable_config_object[[current_var]]$median <- current_median
variable_config_object[[current_var]]$min <- current_range[1]
variable_config_object[[current_var]]$max <- current_range[2]
}
# return the update variable_config_object
return(variable_config_object)
}
add_slider_features <- function(variable_config_object, base_data) {
# loop over the variables specified the variable configuration object
for(index in variable_config_object) {
# grab the current variable raw name
current_var <- names(variable_config_object)[[index]]
# if it's numeric, calculate the relevant values, otherwise assign NA
# to the values to the properties exist but are appropriate for a non-
# numeric variable
if(is.numeric(base_data[[current_var]]) {
current_median <- median(base_data[[current_var]])
current_range <- range(base_data[[curent_var]])
# round the range values to be user-friendly
current_range[1] <- floor(current_range[1])
current_range[2] <- ceiling(current_range[2])
} else {
current_median <- NA
current_range <- NA
}
# add the values to the variable configuration
variable_config_object[[current_var]]$median <- current_median
variable_config_object[[current_var]]$min <- current_range[1]
variable_config_object[[current_var]]$max <- current_range[2]
}
# return the update variable_config_object
return(variable_config_object)
}
add_slider_features <- function(variable_config_object, base_data) {
# loop over the variables specified the variable configuration object
for(index in 1:length(variable_config_object)) {
# grab the current variable raw name
current_var <- names(variable_config_object)[[index]]
# if it's numeric, calculate the relevant values, otherwise assign NA
# to the values to the properties exist but are appropriate for a non-
# numeric variable
if(is.numeric(base_data[[current_var]]) {
current_median <- median(base_data[[current_var]])
current_range <- range(base_data[[curent_var]])
# round the range values to be user-friendly
current_range[1] <- floor(current_range[1])
current_range[2] <- ceiling(current_range[2])
} else {
current_median <- NA
current_range <- NA
}
# add the values to the variable configuration
variable_config_object[[current_var]]$median <- current_median
variable_config_object[[current_var]]$min <- current_range[1]
variable_config_object[[current_var]]$max <- current_range[2]
}
# return the update variable_config_object
return(variable_config_object)
}
add_slider_features <- function(variable_config_object, base_data) {
# loop over the variables specified the variable configuration object
for(index in 1:length(variable_config_object)) {
# grab the current variable raw name
current_var <- names(variable_config_object)[[index]]
# if it's numeric, calculate the relevant values, otherwise assign NA
# to the values to the properties exist but are appropriate for a non-
# numeric variable
if(is.numeric(base_data[[current_var]])) {
current_median <- median(base_data[[current_var]])
current_range <- range(base_data[[curent_var]])
# round the range values to be user-friendly
current_range[1] <- floor(current_range[1])
current_range[2] <- ceiling(current_range[2])
} else {
current_median <- NA
current_range <- NA
}
# add the values to the variable configuration
variable_config_object[[current_var]]$median <- current_median
variable_config_object[[current_var]]$min <- current_range[1]
variable_config_object[[current_var]]$max <- current_range[2]
}
# return the update variable_config_object
return(variable_config_object)
}
test <- add_slider_features(variable_configuration, base_data)
add_slider_features <- function(variable_config_object, base_data) {
# loop over the variables specified the variable configuration object
for(index in 1:length(variable_config_object)) {
# grab the current variable raw name
current_var <- names(variable_config_object)[[index]]
# if it's numeric, calculate the relevant values, otherwise assign NA
# to the values to the properties exist but are appropriate for a non-
# numeric variable
if(is.numeric(base_data[[current_var]])) {
current_median <- median(base_data[[current_var]])
current_range <- range(base_data[[current_var]])
# round the range values to be user-friendly
current_range[1] <- floor(current_range[1])
current_range[2] <- ceiling(current_range[2])
} else {
current_median <- NA
current_range <- NA
}
# add the values to the variable configuration
variable_config_object[[current_var]]$median <- current_median
variable_config_object[[current_var]]$min <- current_range[1]
variable_config_object[[current_var]]$max <- current_range[2]
}
# return the update variable_config_object
return(variable_config_object)
}
test <- add_slider_features(variable_configuration, base_data)
str(test)
rm(list = ls())
shiny::runApp()
variable_configuration
lapply(function(x) x$slider_candidate == TRUE, variable_configuration)
help(lapply)
lapply(variable_configuration, function(x) x$slider_candidate == TRUE)
unlist(lapply(variable_configuration, function(x) x$slider_candidate == TRUE))
slider_index <- unlist(lapply(variable_configuration,
function(x) x$slider_candidate == TRUE))
slider_index
variable_configuration[slider_index]
slider_index["mist_scores"]
slider_index["mist_scores"] <- FALSE
slider_index
selected_sliders <- variable_configuration[slider_index]
length(selected_sliders)
add_slider_features <- function(variable_config_object, base_data) {
# loop over the variables specified the variable configuration object
for(index in 1:length(variable_config_object)) {
# adjust object name to be more manageable
vc <- variable_config_object
# grab the current variable raw name
current_var <- names(vc)[[index]]
# if it's numeric, calculate the relevant values, otherwise assign NA
# to the values to the properties exist but are appropriate for a non-
# numeric variable
if(is.numeric(base_data[[current_var]])) {
current_median <- median(base_data[[current_var]])
current_range <- range(base_data[[current_var]])
# apply the variable's transform_to_ui function
current_median <- vc[[index]]$transform_for_ui(current_median)
current_range[1] <- vc[[index]]$transform_for_ui(current_range[1])
current_range[2] <- vc[[index]]$transform_for_ui(current_range[2])
# round the range values to be user-friendly
current_range[1] <- floor(current_range[1])
current_range[2] <- ceiling(current_range[2])
} else {
current_median <- NA
current_range <- NA
}
# add the values to the variable configuration
variable_config_object[[current_var]]$median <- current_median
variable_config_object[[current_var]]$min <- current_range[1]
variable_config_object[[current_var]]$max <- current_range[2]
}
# return the update variable_config_object
return(variable_config_object)
}
test <- add_slider_features(variable_configuration, base_data)
test[[1]]
test[[5]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
variable_configuration[[1]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
selected_sliders[[1]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
explore_likelihoods
explore_likelihoods()
shiny::runApp()
shiny::runApp()
ribbon_likelihoods$predictor
shiny::runApp()
ribbon_likelihoods$predictor
shiny::runApp()
log(3)
exp(1.098612)
exp(1.098612)-1
shiny::runApp()
